{"version":3,"sources":["Constants/Constants.tsx","serviceWorker.ts","Router.tsx","Store/State.ts","Store/Reducers.ts","Store/Store.ts","index.tsx"],"names":["GETNAME","Boolean","window","location","hostname","match","HomeContainer","React","lazy","AppRouter","exact","path","component","Component","appState","Home","name","id","reducers","combineReducers","homeState","stateTemp","preHomeState","action","type","store","createStore","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAA,kCACO,IAAMA,EAAU,W,2ICWHC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCfEC,EAAgBC,IAAMC,MAAK,kBAAM,sDAElBC,E,uKAEjB,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,QAAQC,UAAWN,U,GANRO,a,+BCH1BC,EAAqB,CAChCC,KAAM,CACJC,KAAM,GACNC,GAAI,IC2BOC,EAHEC,YAAgB,CAC/BC,UAnBgB,WAA+E,IAC3FC,EADaC,EAA6E,uDAAnDR,EAASC,KAAMQ,EAAoC,uCAE9F,OAAQA,EAAOC,MACb,KAAKxB,IACHqB,EAAS,eACJC,EADI,GAEJC,EAFI,CAGPN,GAAIK,EAAaL,GAAK,IAExB,MACF,QAEEI,EAAYC,EAGhB,OAAOD,KCtBMI,EADDC,YAAYR,GCM1BS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,WAAD,CAAUK,SAAU,4CAClB,kBAAC,EAAD,SAINC,SAASC,eAAe,SL0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3e0b88a.chunk.js","sourcesContent":["/// ����action��typeֵ������ɲ��Ϊ��ҳ�桢�����\rexport const GETNAME = 'GETNAME';\rexport type GETNAME = typeof GETNAME;\r","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\n// �˴�����ʹ��React.lazy����Ϊindex.tsxʹ����Suspense���\r\nconst HomeContainer = React.lazy(() => import('./Containers/Home.Container'));\r\n\r\nexport default class AppRouter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <BrowserRouter>\r\n          <Route exact path=\"/\" component={HomeContainer} />\r\n          <Route exact path=\"/Home\" component={HomeContainer} />\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { AppState } from '../Types/AppState';\r\n\r\nexport const appState: AppState = {\r\n  Home: {\r\n    name: '',\r\n    id: 0\r\n  }\r\n}\r\n","import { GETNAME } from '../Constants/Constants';\r\nimport { appState } from './State';\r\nimport { ModifyAction } from './Actions';\r\nimport { HomeState } from '../Types/AppState';\r\nimport { combineReducers, } from 'redux';\r\n/**\r\n * HomeReducer 用于处理action发送给store的数据\r\n * @param {HomeState} preHomeState 上一次的homeState\r\n * @param {ModifyAction} action action传递过来的带有type的数据\r\n * @returns {HomeState} homeState 生成的新的homeState\r\n */\r\nconst homeState = (preHomeState: HomeState = appState.Home, action: ModifyAction): HomeState => {\r\n  let stateTemp;\r\n  switch (action.type) {\r\n    case GETNAME:\r\n      stateTemp = {\r\n        ...preHomeState,\r\n        ...action,\r\n        id: preHomeState.id + 1\r\n      };\r\n      break;\r\n    default:\r\n      // 没有任何action的话直接吧上一次的homeState抛出\r\n      stateTemp = preHomeState;\r\n      break;\r\n  }\r\n  return stateTemp;\r\n}\r\n// 可将多个reducer合并到一起\r\nconst reducers = combineReducers({\r\n  homeState\r\n})\r\nexport default reducers;\r\n","import { createStore } from 'redux';\r\nimport reducers from './Reducers';\r\n//����Ӧ��store\r\nconst store = createStore(reducers);\r\nexport default store;\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppRouter from './Router';\r\nimport { Provider } from 'react-redux';\r\nimport store from './Store/Store'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <AppRouter />\r\n      </Suspense>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}