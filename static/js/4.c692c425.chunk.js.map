{"version":3,"sources":["Components/Home.tsx","Containers/Home.Container.tsx","Store/Actions.ts"],"names":["Home","SetName","this","props","console","log","homeState","id","name","Button","variant","color","onClick","Component","connect","dispatch","type","GETNAME"],"mappings":"wLA0BeA,E,yKAdXC,EADoBC,KAAKC,MAAjBF,SACA,QACRG,QAAQC,IAAIH,KAAKC,S,+BAET,IAAD,SACcD,KAAKC,MAAMG,UAAxBC,EADD,EACCA,GAAIC,EADL,EACKA,KACZ,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAAUC,QAAS,kBAAM,EAAKA,YAA/D,eACA,6BAAMJ,GACN,6BAAMD,Q,GAZKM,aCYJC,uBATS,SAACR,GAAD,sBAA2CA,MAKxC,SAACS,GAAD,MAAyB,CAClDd,QAAS,SAACO,GAAD,OAAkBO,ECLN,SAACP,GACtB,MAAO,CACLQ,KAAMC,IACNT,QDEkCP,CAAQO,QAG/BM,CAA6Cd","file":"static/js/4.c692c425.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { HomeState } from '../Types/AppState';\r\n// 当前页面的状态数据结构\r\nexport interface IProps {\r\n  homeState: HomeState;\r\n  SetName: (name: string) => void;\r\n};\r\n\r\nclass Home extends Component<IProps> {\r\n  onClick() {\r\n    const { SetName } = this.props;\r\n    SetName('alex');\r\n    console.log(this.props);\r\n  }\r\n  render() {\r\n    const { id, name } = this.props.homeState;\r\n    return (\r\n      <div>\r\n        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.onClick()}>Hello World</Button>\r\n        <div>{name}</div>\r\n        <div>{id}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","/// ҳ������\r\nimport { HomeState } from \"../Types/AppState\";\r\nimport { Dispatch } from \"redux\";\r\nimport { SetName } from \"../Store/Actions\";\r\nimport { connect } from \"react-redux\";\r\nimport Home from \"../Components/Home\";\r\n\r\n/**\r\n * mapStateToProps����ǰstore������������ǵ������Ҫ����ʽ���ݵ������\r\n * @param {HomeState} homeState\r\n * @returns  {HomeState} homeState ҳ����Ҫ�����ݽṹ\r\n */\r\nconst mapStateToProps = (homeState: HomeState): HomeState => ({ ...homeState });\r\n\r\n/**\r\n * mapDispatchToProps����dispatch�����������ص�props��actions�͵�store��\r\n */\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  SetName: (name: string) => dispatch(SetName(name)),\r\n});\r\n// ������������ҳ��\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","/// �û�������action\r\n\r\nimport { GETNAME } from '../Constants/Constants';\r\n\r\nexport interface IGETNAMEACTION {\r\n  name: string;\r\n  type: GETNAME;\r\n}\r\nexport type ModifyAction = IGETNAMEACTION;\r\n/**\r\n * dispatch��action���ݣ�name�����͵�store\r\n * @param name\r\n */\r\nexport const SetName = (name: string): IGETNAMEACTION => {\r\n  return {\r\n    type: GETNAME,\r\n    name\r\n  }\r\n}\r\n"],"sourceRoot":""}